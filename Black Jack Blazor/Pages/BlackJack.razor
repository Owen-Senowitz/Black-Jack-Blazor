@page "/blackjack"

@using Black_Jack_Blazor.Data.BlackJack

<div class="p-2">
    <h1>BlackJack</h1>
    <h3>Money: $@money</h3>
    <h3>Bet: $@betAmount</h3>
    <h3>Status: @state</h3>
    <h3>Score: @score</h3>
</div>


<div class="container-fluid">
    <div class="row">
        <div class="col-1">
            @if (state == GameState.InProgress)
            {
                <button class="btn btn-primary" @onclick="stand" value="click">Deal</button>
                <button class="btn btn-primary" @onclick="hit" value="click">Deal</button>
            }
            else if (state == GameState.NotStarted || state == GameState.Betting)
            {
                <button class="btn btn-primary" @onclick="deal_card" value="click">Deal</button>
            }
        </div>
        <div class="col-1">
            <button class="p-1 btn btn-primary" @onclick="(() => bet(1))">Bet $1</button>
            <button class="btn btn-primary" @onclick="(() => bet(5))">Bet $5</button>
            <button class="btn btn-primary" @onclick="(() => bet(10))">Bet $10</button>
            <button class="btn btn-primary" @onclick="(() => bet(20))">Bet $20</button>
            <button class="btn btn-primary" @onclick="(() => bet(50))">Bet $50</button>
        </div>

        <div class="col-5">
            <table class="table table-progress-bar-striped table-bordered">
                <thead>
                    <tr>
                        <th>Card Value</th>
                        <th>Suit</th>
                        <th>Score</th>
                    </tr>
                </thead>
                <tbody>
                    @foreach (var dealtcard in dealtCards)
                    {
                        <tr>
                            <td>@dealtcard.CardValue</td>
                            <td>@dealtcard.Suit</td>
                            <td>@dealtcard.Score</td>
                        </tr>
                    }
                </tbody>
            </table>
        </div>
    </div>
</div>


@code {
    List<Card> dealtCards = new List<Card>();
    public int money { get; set; } = 1000;
    public int betAmount { get; set; } = 0;
    public string card { get; set; } = "";
    public int score { get; set; } = 0;
    public Card newCard { get; set; }
    Deck deck = new Deck();
    GameState state = GameState.NotStarted;


    protected override async Task OnInitializedAsync()
    {
        deck.Shuffle();
    }

    public void deal_card()
    {
        if (betAmount > 0)
        {
            newCard = deck.DealCard();
            dealtCards.Add(newCard);
            card = newCard.ToString();
            score += newCard.Score;

            if (score < 21)
            {
                state = GameState.InProgress;
            }
            else if (score > 21)
            {
                state = GameState.Busted;
                deck.Shuffle();
                score = 0;
                dealtCards.Clear();
                money = money - betAmount;
                betAmount = 0;
            }
            else if (score == 21)
            {
                state = GameState.BlackJack;
            }
        }
        else
        {
            state = GameState.Betting;
        }

    }

    public void bet(int amount)
    {
        if (money >= amount)
        {
            betAmount += amount;
        }
    }

    public void stand()
    {

    }

    public void hit()
    {
        
    }
}
